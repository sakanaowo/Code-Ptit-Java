import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

import static java.lang.Math.round;

class Bill implements Comparable<Bill> {
    String ID;
    int coefficient;
    long old_index, new_index, total, surcharge, amount;
    static int index = 1;

    public Bill() {
        this.ID = "KH" + String.format("%02d", index++);
        this.coefficient = calcCoef(Sakana.sc.nextLine());
        this.old_index = Long.parseLong(Sakana.sc.nextLine());
        this.new_index = Long.parseLong(Sakana.sc.nextLine());
        this.amount = calcAmount();
        this.surcharge = calcSurcharge();
        this.total = amount + surcharge;
    }

    private long calcSurcharge() {
        if (new_index - old_index < 50) return 0;
        if (new_index - old_index <= 100) return round(amount / 100.0 * 35);
        return amount;
    }

    private int calcCoef(String s) {
        switch (s) {
            case "KD":
                return 3;
            case "NN":
                return 5;
            case "TT":
                return 4;
            default:
                return 2;
        }
    }

    private long calcAmount() {
        return (new_index - old_index) * coefficient * 550;
    }

    @Override
    public String toString() {
        return ID + " " + coefficient + " " + amount + " " + surcharge + " " + total;
    }

    public int compareTo(Bill o) {
        return (this.total - o.total > 0) ? -1 : 1;
    }
}

public class Sakana {
    static Scanner sc = new Scanner(System.in);
//
//    static {
//        try {
//            sc = new Scanner(new File("DATA.in"));
//        } catch (FileNotFoundException e) {
//            throw new RuntimeException(e);
//        }
//    }

    public static void main(String[] args) {
        ArrayList<Bill> bills = new ArrayList<>();
        int t = Integer.parseInt(sc.nextLine());
        while (t-- > 0) bills.add(new Bill());
        Collections.sort(bills);
        for (Bill b : bills) System.out.println(b);
    }
}
