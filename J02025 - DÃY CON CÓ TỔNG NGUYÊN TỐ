import java.util.*;

public class Sakana {
    static boolean[] prime = new boolean[1000];

    static void sieve() {
        Arrays.fill(prime, true);
        prime[0] = false;
        prime[1] = false;
        for (int i = 2; i * i <= 1000; i++) {
            if (prime[i]) {
                for (int j = i * i; j < 1000; j += i) prime[j] = false;
            }
        }
    }

    public static void main(String[] args) {
        sieve();
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();

        while (T-- > 0) {
            int N = sc.nextInt();
            int[] A = new int[N];

            for (int i = 0; i < N; i++) {
                A[i] = sc.nextInt();
            }

            Arrays.sort(A);
            reverse(A);

            List<List<Integer>> subsets = new ArrayList<>();

            for (int i = 1; i < (1 << N); i++) {
                List<Integer> subset = new ArrayList<>();
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    if ((i & (1 << j)) != 0) {
                        subset.add(A[j]);
                        sum += A[j];
                    }
                }
                if (prime[sum]) subsets.add(subset);
            }

            Collections.sort(subsets, new Comparator<List<Integer>>() {
                public int compare(List<Integer> o1, List<Integer> o2) {
                    int len = Math.min(o1.size(), o2.size());
                    for (int i = 0; i < len; i++) {
                        if (!o1.get(i).equals(o2.get(i))) {
                            return o1.get(i) - o2.get(i);
                        }
                    }
                    return o1.size() - o2.size();
                }
            });

            for (List<Integer> subset : subsets) {
                for (int num : subset) {
                    System.out.print(num + " ");
                }
                System.out.println();
            }
        }
        sc.close();
    }

    public static void reverse(int[] A) {
        int i = 0, j = A.length - 1;
        while (i < j) {
            int temp = A[i];
            A[i] = A[j];
            A[j] = temp;
            i++;
            j--;
        }
    }
}
