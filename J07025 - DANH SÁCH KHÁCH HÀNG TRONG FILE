import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

class Customer implements Comparable<Customer> {
    String name, ID, birthday, address, gender;
    private int a, b, c;
    static int index = 1;

    public Customer() {
        this.ID = String.format("KH%03d", index++);
        this.name = rename(Sakana.sc.nextLine());
        this.gender = Sakana.sc.nextLine();
        this.birthday = rebirth(Sakana.sc.nextLine());
        this.address = Sakana.sc.nextLine();
    }

    private String rebirth(String s) {
        String[] f = s.split("/");
        StringBuilder sb = new StringBuilder();
        a = Integer.parseInt(f[0]);
        b = Integer.parseInt(f[1]);
        c = Integer.parseInt(f[2]);
        f[0] = (a < 10) ? "0" + f[0] : f[0];
        f[1] = (b < 10) ? "0" + f[1] : f[1];
        sb.append(f[0]).append("/").append(f[1]).append("/").append(f[2]);
        return sb.toString();
    }

    private String rename(String s) {
        String[] f = s.split("\\s+");
        StringBuilder sb = new StringBuilder();
        for (String x : f) {
            if (!x.isEmpty()) sb.append(x.substring(0, 1).toUpperCase()).append(x.substring(1).toLowerCase() + " ");
        }
        return sb.toString().trim();
    }

    @Override
    public String toString() {
        return ID + " " + name + " " + gender + " " + address + " " + birthday;
    }

    public int compareTo(Customer o) {
        if (this.c == o.c) {
            if (this.b == o.b) return this.a - o.a;
            return this.b - o.b;
        }
        return this.c - o.c;
    }
}

public class Sakana {
    static Scanner sc;

    static {
        try {
            sc = new Scanner(new File("KHACHHANG.in"));
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) {
        int t = Integer.parseInt(sc.nextLine());
        List<Customer> customers = new ArrayList<Customer>();
        while (t-- > 0) customers.add(new Customer());
        Collections.sort(customers);
        for (Customer c : customers) System.out.println(c);
    }
}
